var documenterSearchIndex = {"docs":
[{"location":"index.html#ModiaLang-Documentation","page":"Home","title":"ModiaLang Documentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"ModiaLang is an environment in form of a Julia package to model and simulate physical systems (electrical, mechanical, thermo-dynamical, etc.) described by differential and algebraic equations. A user defines a model on a high level with model components (like a mechanical body, an electrical resistance, or a pipe) that are physically connected together. A model component is constructed by \"expression = expression\" equations. The defined model is symbolically processed (for example, equations might be analytically differentiated) with algorithms from package ModiaBase.jl. From the transformed model a Julia function is generated that is used to simulate the model with integrators from DifferentialEquations.jl. The basic type of the floating point variables is usually Float64, but can be set to any type FloatType<:AbstractFloat via @instantiateModel(..., FloatType = xxx), for example it can be set to Float32, DoubleFloat, Measurement{Float64}, StaticParticles{Float64,100}.","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"ModiaLang is included in Modia and is available, when Modia was installed.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"A standalone ModiaLang version is installed with:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia> ]add ModiaLang","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Furthermore, one or more of the following packages should be installed in order  to be able to generate plots:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia> ]add ModiaPlot_PyPlot        # if plotting with PyPlot desired\r\n        add ModiaPlot_GLMakie       # if plotting with GLMakie desired\r\n        add ModiaPlot_WGLMakie      # if plotting with WGLMakie desired\r\n        add ModiaPlot_CairoMakie    # if plotting with CairoMakie desired","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"It is recommended to also add the following packages, in order that all tests and examples can be executed in your standard environment:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia> ]add Measurements, MonteCarloMeasurements, Distributions","category":"page"},{"location":"index.html#Release-Notes","page":"Home","title":"Release Notes","text":"","category":"section"},{"location":"index.html#Version-0.8.1","page":"Home","title":"Version 0.8.1","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Added a minimal documentation, including release notes.\nNo message anymore, when ModiaLang is started.\nFixed bug that using ModiaResult is needed, when calling @usingModiaPlot.","category":"page"},{"location":"index.html#Version-0.8.0","page":"Home","title":"Version 0.8.0","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Improved scalability by using OrderedDicts instead of named tuples for models, variables and parameter modifications.\nSpeed improvements for structural and symbolic algorithms.\nAdded support for state events, time events and synchronous operators.\nAdded support for mixed linear equation systems having Real and Boolean unknowns.\nAdded support for user-defined components defined by structs and functions (multibody modeling with Modia3D is based on this feature). This makes it possible to utilize algorithms specialized for a component.\nAdded support for numerical and analytic linearization.\nAdded support for propagation of parameters (e.g. deep in a model, the value of a parameter can be defined as a function of some top level parameter and this parameter is changed before simulation starts).\nNew small model libraries Translational.jl and PathPlanning.jl added.\nResult storage changed: sol = simulate!(...) calls internally sol = solve(..) from   DifferentialEquations.jl. sol contains time and the states at the communication time grid and at events. This is now kept in simulate(..), so the return value of simulate!(..) can be exactly used as if solve(..) would have been used directly.\nThe plot(..) command now supports the following underlying plot packages:  PyPlot, GLMakie, WGLMakie, and CairoMakie. It is also possible to select NoPlot, to ignore plot(..) calls  or SilenNoPlot to ignore plot(..) calls silently. The latter is useful for runtests.jl. Note, often PyPlot is the best choice.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Changes that are not backwards compatible to version 0.7.x:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Models are OrderedDicts and no longer NamedTuples.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"simulate!(..): \nIf FloatType=Float64 and no algorithm is defined, then Sundials.CVODE_BDF() is used instead of the default algorithm of DifferentialEquations as in 0.7. The reason is that Modia models are usually large and expensive to evaluate and have often stiff parts, so that multi-step methods are often by far the best choice. CVODE_BDF() seems to be a good choice in many applications (another algorithm should be used, if there are many events, highly oscillatory vibrations, or if all states are non-stiff). \nThe default value of stopTime is equal to startTime (which has a default value of 0.0 s), and is no longer 1.0 s.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Plotting is defined slightly differently (@useModiaPlot, instead of using ModiaPlot).","category":"page"},{"location":"index.html#Version-0.7.3","page":"Home","title":"Version 0.7.3","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Evaluation and propagation of parameter expressions (also in simulate!(..., merge=Map(...))). Propagation of start/init values of states is not yet supported.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"State events supported.","category":"page"},{"location":"index.html#Version-0.7.2","page":"Home","title":"Version 0.7.2","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Missing dependency of Test package added.","category":"page"},{"location":"index.html#Version-0.7.1","page":"Home","title":"Version 0.7.1","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Variable constructor Var(...) introduced. For example: v = input | Var(init = 1.2u\"m\"). ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Functions are called in the scope where macro @instantiateModel is called.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"New arguments of function simulate!:\nParameter and init/start values can be changed with argument merge.\nA simulation can be checked with argument requiredFinalStates.\nArgument logParameters lists the parameter and init/start values used for the simulation.\nArgument logStates lists the states, init, and nominal values used for the simulation.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"end in array ranges is supported, for example v[2:end].","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"New (small) model library Modia/models/HeatTransfer.jl.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Modia Tutorial improved.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Functions docu improved.","category":"page"},{"location":"index.html#Version-0.7.0","page":"Home","title":"Version 0.7.0","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Initial version, based on code developed for Modia 0.6 and ModiaMath 0.6.","category":"page"},{"location":"index.html#Main-developers","page":"Home","title":"Main developers","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Hilding Elmqvist, Mogram.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Martin Otter, DLR - Institute of System Dynamics and Control.","category":"page"}]
}
